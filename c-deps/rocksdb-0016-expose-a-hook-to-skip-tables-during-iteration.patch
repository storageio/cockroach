From 3da546488aedc65c213caf84080a9bb980f3460a Mon Sep 17 00:00:00 2001
From: Nikhil Benesch <nikhil.benesch@gmail.com>
Date: Wed, 19 Apr 2017 15:39:26 -0400
Subject: [PATCH 16/16] expose a hook to skip tables during iteration

Add a `table_filter` to `ReadOptions` that allows specifying a callback
to be executed during iteration before each table in the database is
scanned. The callback is passed the table's properties; if the callback
returns false, the table is not scanned.

This can be used in conjunction with a `TablePropertiesCollector` to
dramatically speed up scans by skipping tables that are known to contain
irrelevant data for the scan at hand.
---
 db/db_iterator_test.cc    | 64 +++++++++++++++++++++++++++++++++++++++++++++++
 db/table_cache.cc         |  7 +++++-
 include/rocksdb/options.h |  7 ++++++
 3 files changed, 77 insertions(+), 1 deletion(-)

diff --git a/db/db_iterator_test.cc b/db/db_iterator_test.cc
index df09bcc..6b3abef 100644
--- a/db/db_iterator_test.cc
+++ b/db/db_iterator_test.cc
@@ -1911,6 +1911,70 @@ TEST_F(DBIteratorTest, DBIteratorSkipRecentDuplicatesTest) {
                  NUMBER_OF_RESEEKS_IN_ITERATION));
 }

+TEST_F(DBIteratorTest, TableFilter) {
+  ASSERT_OK(Put("a", "1"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("b", "2"));
+  ASSERT_OK(Put("c", "3"));
+  dbfull()->Flush(FlushOptions());
+  ASSERT_OK(Put("d", "4"));
+  ASSERT_OK(Put("e", "5"));
+  ASSERT_OK(Put("f", "6"));
+  dbfull()->Flush(FlushOptions());
+
+  // Ensure the table_filter callback is called once for each table.
+  {
+    ReadOptions opts;
+    opts.table_filter = [](const TableProperties& props) {
+      static std::set<uint64_t> unseen {1, 2, 3};
+      auto it = unseen.find(props.num_entries);
+      if (it == unseen.end()) {
+        ADD_FAILURE() << "saw table properties with an unexpected " << props.num_entries << " entries";
+      } else {
+        unseen.erase(it);
+      }
+      return true;
+    };
+    auto iter = db_->NewIterator(opts);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->1");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "b->2");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "c->3");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "d->4");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "e->5");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "f->6");
+    iter->Next();
+    ASSERT_FALSE(iter->Valid());
+    delete iter;
+  }
+
+  // Ensure returning true in the table_filter hides the keys from that table
+  // during iteration.
+  {
+    ReadOptions opts;
+    opts.table_filter = [](const TableProperties& props) {
+      return props.num_entries != 2;
+    };
+    auto iter = db_->NewIterator(opts);
+    iter->SeekToFirst();
+    ASSERT_EQ(IterStatus(iter), "a->1");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "d->4");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "e->5");
+    iter->Next();
+    ASSERT_EQ(IterStatus(iter), "f->6");
+    iter->Next();
+    ASSERT_FALSE(iter->Valid());
+    delete iter;
+  }
+}
+
 }  // namespace rocksdb

 int main(int argc, char** argv) {
diff --git a/db/table_cache.cc b/db/table_cache.cc
index ad8282c..9429e70 100644
--- a/db/table_cache.cc
+++ b/db/table_cache.cc
@@ -227,8 +227,13 @@ InternalIterator* TableCache::NewIterator(
   }
   InternalIterator* result = nullptr;
   if (s.ok()) {
-    result =
-      table_reader->NewIterator(options, arena, &icomparator, skip_filters);
+     if (options.table_filter &&
+         !options.table_filter(*table_reader->GetTableProperties())) {
+       result = NewEmptyInternalIterator(arena);
+     } else {
+       result =
+        table_reader->NewIterator(options, arena, &icomparator, skip_filters);
+     }
     if (create_new_table_reader) {
       assert(handle == nullptr);
       result->RegisterCleanup(&DeleteTableReader, table_reader, nullptr);
diff --git a/include/rocksdb/options.h b/include/rocksdb/options.h
index 1c90a68..90b2a6b 100644
--- a/include/rocksdb/options.h
+++ b/include/rocksdb/options.h
@@ -1053,6 +1053,13 @@ struct ReadOptions {
   // Default: false
   bool ignore_range_deletions;

+  // A callback to determine whether relevant keys for this scan exist in a
+  // given table based on the table's properties. The callback is passed the
+  // properties of each table during iteration. If the callback returns false,
+  // the table will not be scanned.
+  // Default: empty (every table will be scanned)
+  std::function<bool(const TableProperties&)> table_filter;
+
   ReadOptions();
   ReadOptions(bool cksum, bool cache);
 };
